/*
 * Buzzer_driver.cpp
 *
 *  Created on: Aug 9, 2018
 *      Author: tamas
 */
#include <buzzer_driver.hpp>
#include <error_handler.hpp>
#include "HAL_Driver/Inc/stm32l0xx_hal.h"

//mostly copied the code from the autogenerated cube MX functions

/**
 * @brief Initializes the hardware layer of the buzzer
 */
void Buzzer::Init(){
	  TIM_MasterConfigTypeDef master_config;
	    __HAL_RCC_TIM2_CLK_ENABLE();
	  GPIO_InitTypeDef gpio_init_struct;
	  gpio_init_struct.Pin = BUZZER_GPIO_PIN;
	  gpio_init_struct.Mode = GPIO_MODE_AF_PP;
	  gpio_init_struct.Pull = GPIO_NOPULL;
	  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
	  gpio_init_struct.Alternate = GPIO_AF2_TIM2;
	  HAL_GPIO_Init(BUZZER_GPIO_PORT, &gpio_init_struct);

	  htim_2_=TIM_HandleTypeDef();	//I have to call the constructor here explicitly, otherwise it doesn't work #weird
	  htim_2_.Instance = BUZZER_TIMER;
	  htim_2_.Init.Prescaler = 16-1;
	  htim_2_.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim_2_.Init.Period = 488;
	  htim_2_.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_PWM_Init(&htim_2_) != HAL_OK)
	  {
	    FatalError(__FILE__, __LINE__);
	  }

	  master_config.MasterOutputTrigger = TIM_TRGO_RESET;
	  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim_2_, &master_config) != HAL_OK)
	  {
		  FatalError(__FILE__, __LINE__);
	  }

	  config_oc_.OCMode = TIM_OCMODE_PWM1;
	  config_oc_.Pulse = 244;
	  config_oc_.OCPolarity = TIM_OCPOLARITY_HIGH;
	  config_oc_.OCFastMode = TIM_OCFAST_DISABLE;
	  if (HAL_TIM_PWM_ConfigChannel(&htim_2_, &config_oc_, BUZZER_TIMER_CHANNEL) != HAL_OK)
	  {
		  FatalError(__FILE__, __LINE__);
	  }
is_running_=false;


}

/**
 * @brief Starts the buzzer with the set frequency
 */
void Buzzer::Start(){
	if(HAL_TIM_PWM_Start(&htim_2_, BUZZER_TIMER_CHANNEL)!= HAL_OK){
		FatalError(__FILE__, __LINE__);
	}
	is_running_=true;
}

/**
 * @brief Stops the buzzer
 */
void Buzzer::Stop(){
	if(HAL_TIM_PWM_Stop(&htim_2_, BUZZER_TIMER_CHANNEL)!= HAL_OK){
		FatalError(__FILE__, __LINE__);
	}
	is_running_=false;
}

/**
 * @brief sets the frequency of the buzzer, but wont start playing it
 * @param set_freq the frequency to set
 */
void Buzzer::SetFrequency(uint16_t set_freq){
	uint16_t pwm_period=1000000/set_freq-1;
	  htim_2_.Init.Period = pwm_period;
	  htim_2_.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_PWM_Init(&htim_2_) != HAL_OK)
	  {
		  FatalError(__FILE__, __LINE__);
	  }
	  config_oc_.Pulse = pwm_period/2;
	  config_oc_.OCPolarity = TIM_OCPOLARITY_HIGH;
	  config_oc_.OCFastMode = TIM_OCFAST_DISABLE;
	  if (HAL_TIM_PWM_ConfigChannel(&htim_2_, &config_oc_, BUZZER_TIMER_CHANNEL) != HAL_OK)
	  {
		  FatalError(__FILE__, __LINE__);
	  }
if(is_running_){
	Start();
}

}

