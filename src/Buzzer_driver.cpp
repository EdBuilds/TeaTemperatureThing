/*
 * Buzzer_driver.cpp
 *
 *  Created on: Aug 9, 2018
 *      Author: tamas
 */
#include "inc/Buzzer_driver.hpp"
#include "inc/ErrorHandler.hpp"
#include "HAL_Driver/Inc/stm32l0xx_hal.h"
//#include "stm32l0xx_hal_tim.h"
//#include "stm32l0xx_hal_gpio.h"

//TIM_HandleTypeDef Buzzer::htim2;
//mostly copied the code from the autogenerated cube MX functions
//no shame
void _Error_Handler(char *file, int line)
{
  while(1)
  {
  }
}
void Buzzer::Init(){
	  TIM_MasterConfigTypeDef sMasterConfig;
	    __HAL_RCC_TIM2_CLK_ENABLE();
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = BUZZER_GPIO_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
	  HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);

	  htim2=TIM_HandleTypeDef();	//I have to call the constructor here explicitly, otherwise it doesn't work #weird
	  htim2.Instance = BUZZER_TIMER;
	  htim2.Init.Prescaler = 16-1;
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim2.Init.Period = 488;
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
	  sConfigOC.Pulse = 244;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, BUZZER_TIMER_CHANNEL) != HAL_OK)
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }
isRunning=false;


}
void Buzzer::start(){
	if(HAL_TIM_PWM_Start(&htim2, BUZZER_TIMER_CHANNEL)!= HAL_OK){
		ErrorFatal(__FILE__, __LINE__);
	}
	isRunning=true;
}
void Buzzer::stop(){
	if(HAL_TIM_PWM_Stop(&htim2, BUZZER_TIMER_CHANNEL)!= HAL_OK){
		ErrorFatal(__FILE__, __LINE__);
	}
	isRunning=false;
}
void Buzzer::setFrequency(uint16_t setFreq){
	uint16_t PWMPeriod=1000000/setFreq-1;
	  htim2.Init.Period = PWMPeriod;
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }
	  sConfigOC.Pulse = PWMPeriod/2;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, BUZZER_TIMER_CHANNEL) != HAL_OK)
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }
if(isRunning){
	start();
}

}

